"use client";

import { useEffect, useRef } from "react";
import Reveal from "reveal.js";
import Markdown from "reveal.js/plugin/markdown/markdown";
import "reveal.js/dist/reveal.css";
import "reveal.js/dist/theme/black.css"; // Default theme

interface RevealPreviewProps {
  markdown: string;
}

export function RevealPreview({ markdown }: RevealPreviewProps) {
  const deckRef = useRef<Reveal.Api | null>(null);
  const containerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (deckRef.current || !containerRef.current) return;

    const deck = new Reveal(containerRef.current, {
      embedded: true,
      plugins: [Markdown],
    });

    deck.initialize().then(() => {
      deckRef.current = deck;
    });

    // Cleanup function to destroy the Reveal instance on unmount
    return () => {
      try {
        if (deckRef.current) {
          deckRef.current.destroy();
          deckRef.current = null;
        }
      } catch (e) {
        console.warn("Reveal.js destroy call failed.", e);
      }
    };
  }, []); // Empty dependency array to run only once on mount

  useEffect(() => {
    if (deckRef.current) {
      // Use Reveal.js API to update slides
      deckRef.current.getPlugin('markdown').marked(markdown).then((slides: string) => {
        const slidesContainer = deckRef.current?.getSlidesElement();
        if (slidesContainer) {
            slidesContainer.innerHTML = slides;
            deckRef.current?.sync();
        }
      });
    }
  }, [markdown]); // Re-run only when markdown changes

  return (
    <div className="reveal h-full w-full" ref={containerRef}>
      <div className="slides">
        {/* The content will be generated by Reveal.js's markdown plugin */}
      </div>
    </div>
  );
}